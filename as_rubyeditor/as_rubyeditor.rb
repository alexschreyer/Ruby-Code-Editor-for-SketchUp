# =========================
# Main file for Ruby Code Editor
# DO NOT EDIT THIS FILE IN THE RUBY CODE EDITOR, IT WILL STRIP SOME OF THE CODE!!!
# =========================


require 'sketchup'


# =========================


module AS_Extensions

  module AS_RubyEditor
  

    # Creates new class
    class RubyEditor < UI::WebDialog


        # Initialize class and callbacks
        def initialize


          ## Set some variables

          # Get platform info
          @as_su_os = (Object::RUBY_PLATFORM =~ /mswin/i) ? 'windows' :
            ((Object::RUBY_PLATFORM =~ /darwin/i) ? 'mac' : 'other')

          # Get plugin's directory
          @base_dir = File.dirname(__FILE__)
          # Get user directory
          @user_dir = (ENV['USERPROFILE'] != nil) ? ENV['USERPROFILE'] :
            ((ENV['HOME'] != nil) ? ENV['HOME'] : @base_dir )
          # Get working directory from last file - set to user directory otherwise
          @last_file = Sketchup.read_default "as_RubyCodeEditor", "last_file"
          if @last_file != nil
            @snip_dir = File.dirname(@last_file)
          else
            @snip_dir = @user_dir
          end
          # Clean up a bit
          @snip_dir = @snip_dir.tr("\\","/") + "/"

          # Initial code snippet - load from file
          loadcode = File.readlines(File.join( AS_RubyEditor::EXTDIR , 'as_rubyeditor' , 'templates' , 'default.rb' ))
          loadcode.each{ |i| i.gsub!(/\n/, '') }
          @initCode = loadcode.join('\n')
          
          ## Set up the WebDialog

          super "Ruby Code Editor", false, "RubyCodeEditor", 750, 600, 100, 100, true
          ui_loc = File.join(@base_dir , "ui.html")
          # Fix directory name on Win
          ui_loc.gsub!('//', "/")
          # Set HTML UI file for WebDialog
          set_file(ui_loc)
          navigation_buttons_enabled = false
          min_width = 750
          min_height = 600


          ## Callback to execute Ruby code in SketchUp

          add_action_callback("exec") do |dlg, params|
            dlg.execute_script("addResults('Running the code...')")
            v = dlg.get_element_value('console').strip
            # Force encoding for non-UTF text (e.g. in China)
            v.force_encoding('UTF-8')
            # puts v
            r = nil
            begin
              # Should we wrap everything in an undo?
              if params == 'true'
                Sketchup.active_model.start_operation "RubyEditor"
              end
              begin # evaluation
                r = eval v
              rescue => e
                r = e
                raise # pass to outer rescue clause
              end # evaluation
            rescue
              Sketchup.active_model.abort_operation
              r = 'Run aborted. Error: ' + e
            else # only do if NO errors
              if params == 'true'
                Sketchup.active_model.commit_operation
              end
            ensure # always do this
              r!=nil ? r = r.to_s : r='Nil result (no result returned or run failed)'
              p r
              r.gsub!(/ /, "&nbsp;")
              r.gsub!(/\n/, "<br>")
              r.gsub!(/'/, "&rsquo;")
              r.gsub!(/`/, "&lsquo;")
              r.gsub!(/</, "&lt;")
              dlg.execute_script("addResults('Done. Ruby says: <span class=\\'hl\\'>#{r}</span>')")
            end
          end # callback


          ## Callback to clear editor

          add_action_callback("new") do |dlg, params|
            # Use only single quotes here!
            script = 'editor.getDoc().setValue(\''+@initCode+'\')'
            dlg.execute_script(script)
            dlg.execute_script("editor.scrollTo(0,0)")
            dlg.execute_script("addResults('Cleared the editor')")
            dlg.execute_script("$('#save_name').text('untitled.rb')")
            dlg.execute_script("$('#save_filename').val('untitled.rb')")
            dlg.execute_script("editor.markClean()")
            dlg.execute_script("editor.getDoc().clearHistory()")
            
            # Update the MRU list
            mru = []
            (1..5).each { |i|
               mru.push Sketchup.read_default("as_RubyCodeEditor", "mru#{i}", "" )
            }
            dlg.execute_script("updateMRU( '#{mru[0]}' , '#{mru[1]}' , '#{mru[2]}' , '#{mru[3]}' , '#{mru[4]}' )")
                             
          end # callback


          ## Callback to load a file into the editor

          add_action_callback("load") do |dlg, params|
            p @snip_dir
            # Use working directory
            case params
              when 'undefined'
                file = UI.openpanel("Open File", @snip_dir, "*.*") 
              when 'default'
                file = File.join( AS_RubyEditor::EXTDIR , 'as_rubyeditor' , 'templates' , 'default.rb' )  
              else
                file = params
            end            
            return unless file
            # Set file directory as current
            @snip_dir = File.dirname(file)
            name = File.basename(file)
            extension = File.extname(file)
            @file = file
            dlg.execute_script("$('#save_name').text('#{name}')")
            dlg.execute_script("$('#save_filename').val('#{name}')")
            if params != "true"
              dlg.execute_script(%/document.getElementById('console').value=""/)
            end
            f = File.new(file,"r")
            text = f.readlines.join

            # Encode backward slashes and single quotes in Ruby
            text.gsub!('\\', "<84JSed>")
            text.gsub!('\'', "<25SKxw>")
            text.gsub!(/\n/, "\\n")
            text.gsub!(/\r/, "\\r")
            text.gsub!(/'\'/, '\\')
            # Not needed now:
            # text.gsub!(/'/, "\\\\'")
            # Use only single quotes here!

            # Load text into variable in JS and unencode the slashes and quotes
            dlg.execute_script("tmp = '#{text}'")
            dlg.execute_script("tmp = tmp.replace(/<84JSed>/g,'\\\\')")
            dlg.execute_script("tmp = tmp.replace(/<25SKxw>/g,'\\'')")
            script = 'editor.setValue(tmp)'
            dlg.execute_script(script)

            # Not needed now:
            # script = 'editor.setValue(\''+text+'\')'
            # dlg.execute_script(script)
            dlg.execute_script("editor.scrollTo(0,0)")
            dlg.execute_script("addResults('File loaded: #{name}')")
            dlg.execute_script("editor.markClean()")
            dlg.execute_script("editor.getDoc().clearHistory()")

            # Update the MRU list
            mru = []
            save_file = file.tr("\\","/")
            (1..5).each { |i|
               mru.push Sketchup.read_default("as_RubyCodeEditor", "mru#{i}", "" )
            }
            if not mru.include?(save_file)
              (5).downto(2) { |i|
                Sketchup.write_default("as_RubyCodeEditor", "mru#{i}", mru[i-2].to_s ) 
              }
              Sketchup.write_default("as_RubyCodeEditor", "mru1", save_file )           
            end
            dlg.execute_script("updateMRU( '#{mru[0]}' , '#{mru[1]}' , '#{mru[2]}' , '#{mru[3]}' , '#{mru[4]}' )")            
            Sketchup.write_default "as_RubyCodeEditor", "last_file", file.tr("\\","/")
          end # callback


          ## Callback to save a file (and create a backup)

          add_action_callback("save") do |dlg, params|
            filename = dlg.get_element_value("save_filename")
            file = UI.savepanel("Save File", @snip_dir, filename)
            return if file.nil?
            # Set file directory as current
            @snip_dir = File.dirname(file)
            name = File.basename(file)
            extension = File.extname(file)
            # Add RB extension if nothing is there
            if extension == ""
              name = name+".rb"
              file = file+".rb"
            end
            str=dlg.get_element_value("console")
            str.gsub!(/\r\n/, "\n")
            # Not needed now:
            # str.gsub!(/'\'/, "\\")
            # Save backup as well if file exists
            if File.exist?(file) and params == 'true'
              f = File.new(file,"r")
              oldfile = f.readlines
              File.open(file+".bak", "w") { |f| f.puts oldfile }
            end
            File.open(file, "w") { |f| f.puts str }
            dlg.execute_script("$('#save_name').text('#{name}')")
            dlg.execute_script("$('#save_filename').val('#{name}')")
            dlg.execute_script("editor.markClean()")
            dlg.execute_script("addResults('File saved: #{name}')")

            # Save the saved file as most recent
            Sketchup.write_default "as_RubyCodeEditor", "last_file", file.tr("\\","/")
          end # callback


          ## Offer a save when dialog closes

          set_on_close do
            execute_script("addResults('Closing editor...')")
            result = UI.messagebox "Save this file before quitting?", MB_YESNO
            if result == 6 then
              filename = get_element_value("save_filename")
              file = UI.savepanel("Save File", @snip_dir, filename)
              return if file.nil?
              # Set file directory as current
              @snip_dir = File.dirname(file)
              name = File.basename(file)
              extension = File.extname(file)
              # Add RB extension if nothing is there
              if extension == ""
                name = name+".rb"
                file = file+".rb"
              end
              # Need to copy editor to textarea before we pull data
              execute_script("editor.save()")
              str=get_element_value("console")
              str.gsub!(/\r\n/, "\n")
              # Save backup as well if file exists - always here...
              if File.exist?(file)
                f = File.new(file,"r")
                oldfile = f.readlines
                File.open(file+".bak", "w") { |f| f.puts oldfile }
              end
              File.open(file, "w") { |f| f.puts str }

              # Save the saved file as most recent
              Sketchup.write_default "as_RubyCodeEditor", "last_file", file.tr("\\","/")
            end
          end


          ## Callback to close the dialog

          add_action_callback("quit") { |dlg, params|
            dlg.close
          }


          ## Callback to undo the last grouped code execution

          add_action_callback("undo") do |dlg, params|
            Sketchup.undo
            dlg.execute_script("addResults('Last step undone')")
          end # callback


          ## Callback to explore current selection

          add_action_callback("sel_explore") do |dlg, params|
            sel = Sketchup.active_model.selection
            mes = ""
            mes += "#{sel.length} "
            mes += sel.length == 1 ? "entity" : "entities"
            mes += " selected\n\n"
            sel.each_with_index { |item,i|
              mes += "Entity: #{sel[i].to_s}\n"
              mes += "Type: #{sel[i].typename}\n"
              mes += "ID: #{sel[i].entityID}\n"
              if sel[i].typename == "ComponentInstance"
                mes += "Definition name: #{sel[i].definition.name}\n"
              end
              mes += "Parent: #{sel[i].parent}\n"
              mes += "Layer: #{sel[i].layer.name}\n"
              mes += "Center location: #{sel[i].bounds.center}\n"
              mes += "\n"
            }
            UI.messagebox mes , MB_MULTILINE, "Explore Current Selection"
          end # callback


          ## Callback to explore current selection's attributes

          add_action_callback("att_explore") do |dlg, params|
            sel = Sketchup.active_model.selection
            mes = ""
            mes += "#{sel.length} "
            mes += sel.length == 1 ? "entity" : "entities"
            mes += " selected\n\n"
            sel.each_with_index { |item,i|
              mes += "Entity: #{sel[i].to_s}\n"
              if sel[i].attribute_dictionaries
                mes += "Attribute dictionaries:\n"
                names = ""
                sel[i].attribute_dictionaries.each {|dic|
                  mes += "  Dictionary name: #{dic.name}\n"
                  dic.each { | key, value |
                    mes += "    " + key.to_s + '=' + value.to_s + "\n"
                  }
                }
              else
                mes += "No attributes defined\n"
              end
              mes += "\n"
            }
            UI.messagebox mes , MB_MULTILINE, "Explore Current Selection's Attributes"
          end # callback


          ## Callback to show Ruby console

          add_action_callback("show_console") do |dlg, params|
            Sketchup.send_action "showRubyPanel:"
          end # callback
          
          
          ## Callback to show Help dialog

          add_action_callback("help") do |dlg, params|
            AS_RubyEditor::browser( "#{AS_RubyEditor::EXTTITLE} - Help" , "https://alexschreyer.net/projects/sketchup-ruby-code-editor/" )
          end # callback          


          ## Callback to show Browser dialog

          add_action_callback("browser") do |dlg, params|
            AS_RubyEditor::browser( "#{AS_RubyEditor::EXTTITLE} - Reference Browser" , File.join( AS_RubyEditor::EXTDIR , 'as_rubyeditor' , 'ui-browser.html' ) , true )
          end # callback  


          ## Show the dialog and insert sample code

          show do
            script = 'editor.setValue(\''+@initCode+'\')'
            execute_script(script)
            # execute_script("document.getElementById('console').value=''")
            # execute_script("editor.setValue('#{@initCode}')")
            # Set version number in dialog
            execute_script("var rceVersion = #{AS_RubyEditor::EXTVERSION.to_s}")
            execute_script("$('#version').text( rceVersion )")
            execute_script("editor.markClean()")
            # Add Ruby paths to loadpath variable
            lp1 = get_element_value("loadpath1") # .gsub(%r{/}) { "//" }
            lp2 = get_element_value("loadpath2") # .gsub(%r{/}) { "//" }
            if not lp1.empty?
              $LOAD_PATH << lp1 unless $LOAD_PATH.include? lp1
            end
            if not lp2.empty?
              $LOAD_PATH << lp2 unless $LOAD_PATH.include? lp2
            end
          end # show dialog


       end # initialize


    end # class RubyEditor
    
    
    # ==================
    
    
    def self.browser( title , loc , isfile = false )
    # Show local or remote website either as a WebDialog or HtmlDialog
    
      if Sketchup.version.to_f < 17 then  # Use old method
        d = UI::WebDialog.new( title , true ,
          title.gsub(/\s+/, "_") , 1000 , 600 , 100 , 100 , true);
        d.navigation_buttons_enabled = false
        isfile ? d.set_file( loc ) : d.set_url( loc )
        d.show      
      else
        d = UI::HtmlDialog.new( { :dialog_title => title, :width => 1000, :height => 600,
          :style => UI::HtmlDialog::STYLE_DIALOG, :preferences_key => title.gsub(/\s+/, "_") } )
        isfile ? d.set_file( loc ) : d.set_url( loc )
        d.show
        d.center
      end  
    
    end       
    
    
    # ========================


    # Add menu items
    unless file_loaded?(__FILE__)
    
      # Add main menu items
      sub = UI.menu("Window").add_submenu( "Ruby Code Editor" )
      sub.add_item("Ruby Code Editor") { editordlg = AS_RubyEditor::RubyEditor.new }
      sub.add_item("Reference Browser") { self.browser( "#{AS_RubyEditor::EXTTITLE} - Reference Browser" , File.join( AS_RubyEditor::EXTDIR , 'as_rubyeditor' , 'ui-browser.html' ) , true ) }
      sub.add_item("Help") { self.browser( "#{AS_RubyEditor::EXTTITLE} - Help" , "https://alexschreyer.net/projects/sketchup-ruby-code-editor/" ) }

      # Add toolbar
      as_rce_tb = UI::Toolbar.new "Ruby Code Editor"
      as_rce_cmd = UI::Command.new("Ruby Code Editor") { editordlg = AS_RubyEditor::RubyEditor.new }
      # One instance only version:
      # as_rce_cmd = UI::Command.new("Ruby Code Editor") { editordlg = AS_RubyEditor::RubyEditor.new unless editordlg }
      
      as_rce_cmd.small_icon = "img/rce_1_16.png"
      as_rce_cmd.large_icon = "img/rce_1_24.png"
      as_rce_cmd.tooltip = "Ruby Code Editor"
      as_rce_cmd.status_bar_text = "Edit and run Ruby scripts in a nice-looking dialog"
      as_rce_cmd.menu_text = "Ruby Code Editor"
      as_rce_tb = as_rce_tb.add_item as_rce_cmd
      as_rce_tb.show

      # Tell SU that we loaded this file
      file_loaded(__FILE__)
      
    end


  end # module AS_RubyEditor

end # module AS_Extensions


# =========================